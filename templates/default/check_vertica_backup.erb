#!/usr/bin/env python
""" Runs a vertica backup watching the lenght of the run and returning output consitent with a nagios plugin.
    This will kick off a backup job of vertica, time it and then return failed status if the backup fails or if it took longer
    than the thresholds.

    It is written specifically for use with HPCloud SOM chef recipes and assumes certain configuration details such as the
    cloudfuse disk setup.
"""

import subprocess
import sys
import time

# Various settings
backup_dir = "<%= @backup_dir %>"
vbr_config = "<%= @config_file %>"
nsca_wrapper = "/usr/local/bin/nsca_wrapper" #Provided by the monitoring roles
vbr_bin = "/opt/vertica/bin/vbr-patched.py"
fqdn = "<%= node[:fqdn] %>"
warn = <%= @warn %>
crit = <%= @crit %>

class cloudfuse_mount(object):
  """ Used to mount and unmount the cloudfuse drive before/after the backup."""
  def __enter__(self):
    subprocess.check_call(['mount', backup_dir])

  def __exit__(self, type, value, traceback):
    subprocess.check_call(['umount', backup_dir])

def main(argv=None):
  start = time.time()
  exit_status = 0
  backup_output = None

  try:
    with cloudfuse_mount():
      subprocess.check_output("%s -C '%s --config-file %s --task backup' -S 'vertica_backup' -H %s" % (nsca_wrapper, vbr_bin, vbr_config, fqdn), stderr=subprocess.STDOUT)
  except CalledProcessError, cpe:
    exit_status = cpe.returncode
    backup_output = output
    
  stop = time.time()
  duration = (stop - start) / 60

  #Report status and log
  if exit_status != 0:
    print "ERROR: Backup Failed!|%d" % duration
    print backup_output
    sys.exit(2)
  elif duration > crit:
    print "ERROR: Backup completed in %d minutes, %d is the critical threshold|%d" % (duration, crit, duration)
    sys.exit(2)
  elif duration > warn:
    print "WARNING: Backup completed in %d minutes, %d is the warning threshold|%d" % (duration, warn, duration)
    sys.exit(1)
  else:
    print "OK: Backup completed in %d minutes|%d" % (duration, duration)
    sys.exit(0)


if __name__ == "__main__":
    sys.exit(main())
